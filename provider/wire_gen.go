// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"github.com/xh-polaris/platform-sts/biz/adaptor"
	"github.com/xh-polaris/platform-sts/biz/application/service"
	"github.com/xh-polaris/platform-sts/biz/infrastructure/config"
	"github.com/xh-polaris/platform-sts/biz/infrastructure/mapper"
	"github.com/xh-polaris/platform-sts/biz/infrastructure/sdk/cos"
	"github.com/xh-polaris/platform-sts/biz/infrastructure/sdk/wechat"
	"github.com/xh-polaris/platform-sts/biz/infrastructure/stores/redis"
)

// Injectors from wire.go:

func NewStsServerImpl() (*adaptor.StsServerImpl, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	client := cos.NewStsClient(configConfig)
	cosClient, err := cos.NewCosClient(configConfig)
	if err != nil {
		return nil, err
	}
	urlMapper := mapper.NewUrlMapper(configConfig)
	miniProgramMap := wechat.NewWechatApplicationMap(configConfig)
	cosService := &service.CosService{
		Config:         configConfig,
		StsClient:      client,
		CosClient:      cosClient,
		UrlMapper:      urlMapper,
		MiniProgramMap: miniProgramMap,
	}
	userMapper := mapper.NewUserMapper(configConfig)
	redisRedis := redis.NewRedis(configConfig)
	authenticationService := &service.AuthenticationService{
		Config:         configConfig,
		UserMapper:     userMapper,
		MiniProgramMap: miniProgramMap,
		Redis:          redisRedis,
	}
	stsServerImpl := &adaptor.StsServerImpl{
		Config:                configConfig,
		CosService:            cosService,
		AuthenticationService: authenticationService,
	}
	return stsServerImpl, nil
}
